"""Sidebar navigation pattern with master list and detail content area"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/patterns/master_detail.ipynb.

# %% auto 0
__all__ = ['DetailItem', 'DetailItemGroup', 'MasterDetail']

# %% ../../nbs/patterns/master_detail.ipynb 3
from typing import Dict, Any, Optional, Callable, List, Union
from dataclasses import dataclass, field
from fasthtml.common import *
from fastcore.basics import patch

from ..core.context import InteractionContext
from ..core.html_ids import InteractionHtmlIds
from cjm_fasthtml_daisyui.components.navigation.menu import menu, menu_title, menu_modifiers
from cjm_fasthtml_daisyui.components.layout.divider import divider
from cjm_fasthtml_daisyui.components.data_display.badge import badge, badge_colors, badge_sizes
from cjm_fasthtml_daisyui.utilities.semantic_colors import bg_dui
from cjm_fasthtml_daisyui.utilities.border_radius import border_radius
from cjm_fasthtml_tailwind.utilities.flexbox_and_grid import (
    flex_display, flex_direction, shrink, items, justify, gap
)
from cjm_fasthtml_tailwind.utilities.spacing import p, m
from cjm_fasthtml_tailwind.utilities.sizing import w, h, min_h
from cjm_fasthtml_tailwind.utilities.typography import font_weight
from cjm_fasthtml_tailwind.utilities.layout import position, overflow
from cjm_fasthtml_tailwind.utilities.transitions_and_animation import transition, duration
from cjm_fasthtml_tailwind.core.base import combine_classes

# %% ../../nbs/patterns/master_detail.ipynb 5
@dataclass
class DetailItem:
    """Definition of a single item in the master-detail pattern."""
    
    id: str  # Unique identifier
    label: str  # Display text in master list
    render: Callable[[InteractionContext], Any]  # Function to render detail view
    badge_text: Optional[str] = None  # Optional badge text (e.g., "configured", "3 items")
    badge_color: Optional[str] = None  # Badge color class (e.g., badge_colors.success)
    icon: Optional[Any] = None  # Optional icon element
    data_loader: Optional[Callable[[Any], Dict[str, Any]]] = None  # Data loading function
    load_on_demand: bool = True  # Whether to load content only when item is selected

# %% ../../nbs/patterns/master_detail.ipynb 7
@dataclass
class DetailItemGroup:
    """Group of related detail items in a collapsible section."""
    
    id: str  # Group identifier
    title: str  # Group display title
    items: List[DetailItem]  # Items in this group
    default_open: bool = True  # Whether group is expanded by default
    icon: Optional[Any] = None  # Optional group icon
    badge_text: Optional[str] = None  # Optional badge for the group
    badge_color: Optional[str] = None  # Badge color for the group

# %% ../../nbs/patterns/master_detail.ipynb 9
class MasterDetail:
    """Manage master-detail interfaces with sidebar navigation and detail content area."""
    
    def __init__(
        self,
        interface_id: str,  # Unique identifier for this interface
        items: List[Union[DetailItem, DetailItemGroup]],  # List of items/groups
        default_item: Optional[str] = None,  # Default item ID (defaults to first item)
        container_id: str = InteractionHtmlIds.MASTER_DETAIL_CONTAINER,  # HTML ID for container
        master_id: str = InteractionHtmlIds.MASTER_DETAIL_MASTER,  # HTML ID for master list
        detail_id: str = InteractionHtmlIds.MASTER_DETAIL_DETAIL,  # HTML ID for detail area
        master_width: str = "w-64",  # Tailwind width class for master list
        master_title: Optional[str] = None,  # Optional title for master list
        show_on_htmx_only: bool = False  # Whether to show full interface for non-HTMX requests
    ):
        """Initialize master-detail manager."""
        self.interface_id = interface_id
        self.items = items
        self.container_id = container_id
        self.master_id = master_id
        self.detail_id = detail_id
        self.master_width = master_width
        self.master_title = master_title
        self.show_on_htmx_only = show_on_htmx_only
        
        # Build item index for quick lookup (flatten groups)
        self.item_index = {}
        for item in items:
            if isinstance(item, DetailItemGroup):
                for sub_item in item.items:
                    self.item_index[sub_item.id] = sub_item
            else:
                self.item_index[item.id] = item
        
        # Set default item
        if default_item and default_item in self.item_index:
            self.default_item = default_item
        elif self.item_index:
            self.default_item = list(self.item_index.keys())[0]
        else:
            self.default_item = None

# %% ../../nbs/patterns/master_detail.ipynb 11
@patch
def get_item(self:MasterDetail, 
             item_id: str  # Item identifier
            ) -> Optional[DetailItem]:  # DetailItem or None
    """Get item by ID."""
    return self.item_index.get(item_id)

# %% ../../nbs/patterns/master_detail.ipynb 13
@patch
def create_context(self:MasterDetail, 
                   request: Any,  # FastHTML request object
                   sess: Any,  # FastHTML session object
                   item: DetailItem  # Current item
                  ) -> InteractionContext:  # Interaction context for rendering
    """Create interaction context for an item."""
    # Load data if item has data loader
    data = {}
    if item.data_loader:
        data = item.data_loader(request)
    
    return InteractionContext(
        state={},  # Master-detail typically doesn't maintain state between selections
        request=request,
        session=sess,
        data=data
    )

# %% ../../nbs/patterns/master_detail.ipynb 14
@patch
def render_master(self:MasterDetail,
                  active_item_id: str,  # Currently active item ID
                  item_route_func: Callable[[str], str],  # Function to generate item route
                  include_wrapper: bool = True  # Whether to include outer wrapper div
                 ) -> FT:  # Master list element
    """Render master list (sidebar) with items and groups."""
    menu_items = []
    
    # Add menu title if provided
    if self.master_title:
        menu_items.append(
            Li(
                Span(self.master_title, cls=str(menu_title))
            )
        )
    
    # Process items and groups
    for entry in self.items:
        if isinstance(entry, DetailItemGroup):
            # Handle group with collapsible section
            group = entry
            
            # Create submenu items for each item in the group
            submenu_items = []
            for item in group.items:
                is_active = active_item_id == item.id
                
                # Build item content with optional icon and badge
                item_content = []
                if item.icon:
                    item_content.append(item.icon)
                
                item_content.append(
                    Span(
                        item.label,
                        cls=str(font_weight.medium if is_active else "")
                    )
                )
                
                if item.badge_text:
                    badge_cls = combine_classes(
                        badge,
                        item.badge_color or badge_colors.success,
                        badge_sizes.xs,
                        m.l(2)
                    )
                    item_content.append(
                        Span(item.badge_text, cls=badge_cls)
                    )
                
                submenu_items.append(
                    Li(
                        A(
                            Div(
                                *item_content,
                                cls=combine_classes(flex_display, items.center, justify.between, w.full, gap(2))
                            ),
                            href=item_route_func(item.id),
                            hx_get=item_route_func(item.id),
                            hx_target=InteractionHtmlIds.as_selector(self.detail_id),
                            hx_swap="innerHTML",
                            hx_push_url="true",
                            cls=combine_classes(
                                menu_modifiers.active if is_active else "",
                                transition.colors,
                                duration(200)
                            )
                        ),
                        id=InteractionHtmlIds.master_item(item.id)
                    )
                )
            
            # Build group header with optional badge
            group_header_content = []
            if group.icon:
                group_header_content.append(group.icon)
            
            group_header_content.append(
                Span(group.title, cls=str(font_weight.medium))
            )
            
            if group.badge_text:
                badge_cls = combine_classes(
                    badge,
                    group.badge_color or badge_colors.success,
                    badge_sizes.xs,
                    m.l(2)
                )
                group_header_content.append(
                    Span(group.badge_text, cls=badge_cls)
                )
            
            # Check if any item in group is active (to auto-expand)
            group_has_active = any(item.id == active_item_id for item in group.items)
            
            # Create the collapsible group item
            menu_items.append(
                Li(
                    Details(
                        Summary(
                            Div(
                                *group_header_content,
                                cls=combine_classes(flex_display, items.center, justify.between, w.full, gap(2))
                            )
                        ),
                        Ul(*submenu_items),
                        open=group.default_open or group_has_active
                    ),
                    id=InteractionHtmlIds.master_group(group.id)
                )
            )
        else:
            # Handle individual item
            item = entry
            is_active = active_item_id == item.id
            
            # Build item content with optional icon and badge
            item_content = []
            if item.icon:
                item_content.append(item.icon)
            
            item_content.append(
                Span(
                    item.label,
                    cls=str(font_weight.medium if is_active else "")
                )
            )
            
            if item.badge_text:
                badge_cls = combine_classes(
                    badge,
                    item.badge_color or badge_colors.success,
                    badge_sizes.xs,
                    m.l(2)
                )
                item_content.append(
                    Span(item.badge_text, cls=badge_cls)
                )
            
            menu_items.append(
                Li(
                    A(
                        Div(
                            *item_content,
                            cls=combine_classes(flex_display, items.center, justify.between, w.full, gap(2))
                        ),
                        href=item_route_func(item.id),
                        hx_get=item_route_func(item.id),
                        hx_target=InteractionHtmlIds.as_selector(self.detail_id),
                        hx_swap="innerHTML",
                        hx_push_url="true",
                        cls=combine_classes(
                            menu_modifiers.active if is_active else "",
                            transition.colors,
                            duration(200)
                        )
                    ),
                    id=InteractionHtmlIds.master_item(item.id)
                )
            )
    
    menu_ul = Ul(
        *menu_items,
        id=self.master_id,
        cls=combine_classes(
            menu,
            bg_dui.base_200,
            self.master_width,
            p(4),
            min_h.full,
            border_radius.box
        )
    )
    
    if include_wrapper:
        return Div(
            menu_ul,
            cls=combine_classes(
                shrink(0),
                position.sticky,
                overflow.y.auto
            )
        )
    else:
        return menu_ul

# %% ../../nbs/patterns/master_detail.ipynb 15
@patch
def render_master_oob(self:MasterDetail,
                      active_item_id: str,  # Currently active item ID
                      item_route_func: Callable[[str], str]  # Function to generate item route
                     ) -> FT:  # Master list with OOB swap attribute
    """Render master list with OOB swap attribute for coordinated updates."""
    master = self.render_master(
        active_item_id=active_item_id,
        item_route_func=item_route_func,
        include_wrapper=False
    )
    master.attrs['hx-swap-oob'] = 'true'
    return master

# %% ../../nbs/patterns/master_detail.ipynb 16
@patch
def render_detail(self:MasterDetail,
                  item: DetailItem,  # Item to render
                  ctx: InteractionContext  # Interaction context
                 ) -> FT:  # Detail content
    """Render detail content for an item."""
    return item.render(ctx)

# %% ../../nbs/patterns/master_detail.ipynb 17
@patch
def render_full_interface(self:MasterDetail,
                         active_item_id: str,  # Currently active item ID
                         item_route_func: Callable[[str], str],  # Function to generate item route
                         request: Any,  # FastHTML request object
                         sess: Any  # FastHTML session object
                        ) -> FT:  # Complete master-detail interface
    """Render complete master-detail interface with master list and detail area."""
    active_item = self.get_item(active_item_id)
    if not active_item:
        active_item = self.get_item(self.default_item)
        active_item_id = self.default_item
    
    return Div(
        # Master list (sidebar)
        self.render_master(
            active_item_id=active_item_id,
            item_route_func=item_route_func
        ),
        
        # Detail content area
        Div(
            # Load content on demand if enabled
            hx_get=item_route_func(active_item_id) if active_item.load_on_demand else None,
            hx_trigger="load" if active_item.load_on_demand else None,
            hx_swap="innerHTML" if active_item.load_on_demand else None,
            id=self.detail_id,
            cls=combine_classes(
                flex_display,
                flex_direction.col,
                overflow.y.auto,
                p(6),
                w.full
            )
        ) if active_item.load_on_demand else Div(
            self.render_detail(active_item, self.create_context(request, sess, active_item)),
            id=self.detail_id,
            cls=combine_classes(
                flex_display,
                flex_direction.col,
                overflow.y.auto,
                p(6),
                w.full
            )
        ),
        
        id=self.container_id,
        cls=combine_classes(flex_display, gap(4), h.screen, overflow.hidden)
    )

# %% ../../nbs/patterns/master_detail.ipynb 19
@patch
def create_router(self:MasterDetail,
                  prefix: str = ""  # URL prefix for routes (e.g., "/media")
                 ) -> APIRouter:  # APIRouter with generated routes
    """Create FastHTML router with generated routes for this master-detail interface."""
    router = APIRouter(prefix=prefix)

    # Store reference to interface in router for access in route handlers
    router.master_detail = self

    # Index route - show full interface
    @router
    def index(request, sess, item_id: str = None):
        """Main master-detail interface entry point."""
        from cjm_fasthtml_app_core.core.htmx import is_htmx_request
        
        # Determine current item
        current_item_id = item_id or self.default_item
        
        # For HTMX requests, return just the detail content if configured to do so
        if self.show_on_htmx_only and is_htmx_request(request):
            item = self.get_item(current_item_id)
            if item:
                ctx = self.create_context(request, sess, item)
                return self.render_detail(item, ctx)
        
        # For non-HTMX or when full interface is needed
        return self.render_full_interface(
            active_item_id=current_item_id,
            item_route_func=lambda iid: detail.to(item_id=iid),
            request=request,
            sess=sess
        )

    # Detail route - load individual item detail content
    @router
    def detail(request, sess, item_id: str):
        """Load detail content for a specific item."""
        from cjm_fasthtml_app_core.core.htmx import is_htmx_request
        
        item = self.get_item(item_id)
        if not item:
            # Invalid item, redirect to default
            item_id = self.default_item
            item = self.get_item(item_id)
        
        # For HTMX requests, return just the detail content
        if is_htmx_request(request):
            ctx = self.create_context(request, sess, item)
            return self.render_detail(item, ctx)
        
        # For direct navigation (refresh or direct URL access), return full interface
        return self.render_full_interface(
            active_item_id=item_id,
            item_route_func=lambda iid: detail.to(item_id=iid),
            request=request,
            sess=sess
        )

    return router
