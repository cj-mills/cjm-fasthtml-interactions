"""Context management for interaction patterns providing access to state, request, and custom data"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../../nbs/core/context.ipynb.

# %% auto 0
__all__ = ['InteractionContext']

# %% ../../nbs/core/context.ipynb 3
from typing import Dict, Any, Optional
from dataclasses import dataclass, field

# %% ../../nbs/core/context.ipynb 5
@dataclass
class InteractionContext:
    """Context for interaction patterns providing access to state, request, and custom data."""
    
    state: Dict[str, Any] = field(default_factory=dict)  # Workflow state
    request: Optional[Any] = None  # FastHTML request object
    session: Optional[Any] = None  # FastHTML session object
    data: Dict[str, Any] = field(default_factory=dict)  # Custom data from data loaders
    metadata: Dict[str, Any] = field(default_factory=dict)  # Additional metadata
    
    def get(self, 
            key: str,  # Key to retrieve from state
            default: Any = None  # Default value if key not found
           ) -> Any:  # Value from state or default
        """Get value from workflow state."""
        return self.state.get(key, default)
    
    def get_data(self, 
                 key: str,  # Key to retrieve from data
                 default: Any = None  # Default value if key not found
                ) -> Any:  # Value from data or default
        """Get value from custom data."""
        return self.data.get(key, default)
    
    def has(self, 
            key: str  # Key to check in state
           ) -> bool:  # True if key exists in state
        """Check if key exists in workflow state."""
        return key in self.state
    
    def set(self, 
            key: str,  # Key to set in state
            value: Any  # Value to store
           ) -> None:
        """Set value in workflow state."""
        self.state[key] = value
    
    def get_all_state(self) -> Dict[str, Any]:  # All workflow state
        """Get all workflow state as dictionary."""
        return self.state.copy()
    
    def update_state(self, 
                     updates: Dict[str, Any]  # State updates to apply
                    ) -> None:
        """Update multiple state values at once."""
        self.state.update(updates)
